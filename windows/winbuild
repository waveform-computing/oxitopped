#!/bin/bash
# vim: set et sw=4 sts=4:

set -o errexit
set -o nounset

TAGNAME="winbuild"
SSH_CONFIG="$HOME/.ssh/config"
INSTANCE=$(ec2din -F "tag:Name=$TAGNAME" | awk '/^INSTANCE/ {print $2}')

function get_state() {
    # In running state, instance status is the sixth field of the INSTANCE
    # line. In all other states it's the fourth field of the INSTANCE line
    local state=$(ec2din $INSTANCE | awk '/^INSTANCE/ {print $4, $6}')
    local running_state=$(echo $state | awk '{print $2}')
    local stopped_state=$(echo $state | awk '{print $1}')
    if [ "$stopped_state" = "stopped" ]; then
        echo $stopped_state
    else
        echo $running_state
    fi
}

function get_address() {
    ec2din $INSTANCE | awk '/^INSTANCE/ {print $4}'
}

function wait_for_state() {
    # Wait up to 60 seconds for the instance to enter the required state
    local required_state=$1
    local current_state=""
    local timeout=60
    local start=$(date +%s)
    while [ $(date +%s) -lt $((start + timeout)) ]; do
        current_state=$(get_state)
        [ "$current_state" = "$required_state" ] && return 0
        echo "Waiting for $required_state state (currently: $current_state)"
        sleep 2
    done
    echo "Timed out waiting for $required_state state" >&2
    return 1
}

function update_ssh_config() {
    if grep "^\s*Host\s\s*winbuild\s*$" $SSH_CONFIG; then
        awk "BEGIN {state=\"begin\";}
             \$1==\"Host\" && \$2==\"winbuild\" {state=\"winbuild\";}
             \$1==\"Hostname\" && state==\"winbuild\" {
             print \"  Hostname $(get_address)\";
                 state=\"done\";
                 next;
             }
             {print;}" $SSH_CONFIG > $SSH_CONFIG.new
    else
        cat - $SSH_CONFIG << EOF > $SSH_CONFIG.new

Host winbuild
  User winbuild
  Hostname $(get_address)
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null
  Compression yes

EOF
    fi
    mv $SSH_CONFIG.new $SSH_CONFIG
}

function wait_for_ssh() {
    # Wait up to 60 seconds for the SSH daemon to become available
    local host=$1
    local timeout=60
    local start=$(date +%s)
    while [ $(date +%s) -lt $((start + timeout)) ]; do
        ssh $host "true" && return 0
        echo "Waiting for SSH daemon to become available"
        sleep 10
    done
    echo "SSH daemon is still not available" >&2
    return 1
}

case $1 in
    desktop)
        rdesktop -P -z -xb -f -r disk:home=$HOME -r clipboard:CLIPBOARD -u winbuild -p - $(get_address)
        ;;

    start)
        echo "Starting instance $INSTANCE"
        ec2start "$INSTANCE"
        wait_for_state "running"
        echo "Instance $INSTANCE started"
        update_ssh_config
        echo "Updated ssh config with new host address"
        wait_for_ssh winbuild
        ;;

    stop)
        echo "Stopping instance $INSTANCE"
        ec2stop "$INSTANCE"
        wait_for_state "stopped"
        echo "Instance $INSTANCE stopped"
        ;;

    status)
        get_state
        ;;

    *)
        echo "Invalid action $1" >&2
        exit 1
        ;;
esac
